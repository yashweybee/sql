--EMPLOYEE TABLE - EMPLOYEE_ID - FIRST_NAME - LAST_NAME - EMAIL - PHONE_NUMBER - HIRE_DATE - JOB_ID - SALARY - COMMISSION_PCT - MANAGER_ID - DEPARTMENT_ID

--DEPARTMENTS TABLE - DEPARTMENT_ID - DEPARTMENT_NAME - MANAGER_ID - LOCATION_ID 

--JOBS TABLE - JOB_ID - JOB_TITLE - MIN_SALARY - MAX_SALARY

--1. Given SQL query will execute successfully: TRUE/FALSE SELECT last_name, job_id, salary AS Sal FROM employees;
-- TRUE

--2. Identity errors in the following statement: SELECT employee_id, last_name, sal*12 ANNUAL SALARY FROM employees;
-- SELECT employee_id, last_name, sal*12 as 'ANNUAL SALARY' FROM employees;

--3. Write a query to determine the structure of the table 'DEPARTMENTS'
-- sp_help DEPARTMENTS

--4. Write a query to determine the unique Job IDs from the EMPLOYEES table.
-- select distinct JOB_ID from employees

--5. Write a query to display the employee number, lastname, salary (oldsalary), salary increased by 15.5% name it has NewSalary and subtract the (NewSalary from OldSalary) name the column as Increment.
--select  EMPLOYEE_ID, LAST_NAME, SALARY 'oldsalary', SALARY + ( SALARY * 0.155) 'NewSalary', (SALARY + ( SALARY * 0.155)) - SALARY 'Increment' from employees

--6. Write a query to display the minimum, maximum, sum and average salary for each job type.
--select min(SALARY) 'minSal', max(SALARY) 'maxSal', sum(SALARY) 'totalSal', avg(SALARY) 'avgSal' from employees group by job_id

--7. The HR department needs to find the names and hire dates of all employees who were hired before their managers, along with their managersâ€™ names and hire dates.
--select a.LastName, a.hire_date, b.LAST_NAME 'manager name'
--	from employees a, employees b
--	where a.EMPLOYEE_ID = b.MANAGER_ID and a.hire_date < b.hire_date 

--8. Create a report for the HR department that displays employee last names, department numbers, and all the employees who work in the same department as a given employee.
--alter view sameDept as
--select emp1.LAST_NAME [name], emp1.DEPARTMENT_ID [department], emp2.LAST_NAME [colleague]
--from employees emp1
--inner join employees emp2
--on emp1.DEPARTMENT_ID = emp2.DEPARTMENT_ID
--where emp1.LAST_NAME != emp2.LAST_NAME

--select * from sameDept

--9. Find the highest, lowest, sum, and average salary of all employees. Label the columns Maximum, Minimum, Sum, and Average, respectively. Round your results to the nearest whole number.
--select CEILING(max(SALARY)) 'Maximum', CEILING(min(SALARY)) 'Minimum', CEILING(sum(SALARY)) 'Sum', CEILING(avg(SALARY)) 'Average' from employees;

--10. Create a report that displays list of employees whose salary is more than the salary of any employee from department 60.
--create view moreThenDept60 as
--select * from employees where SALARY > any(select SALARY from employees where DEPARTMENT_ID = 60)
--select * from moreThenDept60

--11. Create a report that displays last name and salary of every employee who reports to King(Use any manager name instead of King).
--create view reportsToKing as
--select LAST_NAME, SALARY from employees where MANAGER_ID in (select EMPLOYEE_ID from employees where LAST_NAME = 'king')
--select * from reportsToKing

--12. Write a query to display the list of department IDs for departments that do not contain the job Id ST_CLERK(Add this job ST_CLERK to Job table). Use SET Operator for this query
--select DEPARTMENT_ID from employees 
--EXCEPT 
--select DEPARTMENT_ID from employees where JOB_ID = 'ST_CLERK'

--13. Write a query to display the list of employees who work in department 50 and 80. Show employee Id, job Id and department Id by using set operators. - Add 50 and 80 department Id to department table
--select EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID from employees where DEPARTMENT_ID = 50
--union
--select EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID from employees where DEPARTMENT_ID = 80
